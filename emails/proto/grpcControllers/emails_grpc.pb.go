// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: emails.proto

package grpcControllers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmailSenderClient is the client API for EmailSender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailSenderClient interface {
	SendEmail(ctx context.Context, in *DefaultEmailParams, opts ...grpc.CallOption) (*EmailResponse, error)
	SendOrderEmail(ctx context.Context, in *OrderEmailParams, opts ...grpc.CallOption) (*EmailResponse, error)
}

type emailSenderClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailSenderClient(cc grpc.ClientConnInterface) EmailSenderClient {
	return &emailSenderClient{cc}
}

func (c *emailSenderClient) SendEmail(ctx context.Context, in *DefaultEmailParams, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, "/emails.EmailSender/SendEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailSenderClient) SendOrderEmail(ctx context.Context, in *OrderEmailParams, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, "/emails.EmailSender/SendOrderEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailSenderServer is the server API for EmailSender service.
// All implementations must embed UnimplementedEmailSenderServer
// for forward compatibility
type EmailSenderServer interface {
	SendEmail(context.Context, *DefaultEmailParams) (*EmailResponse, error)
	SendOrderEmail(context.Context, *OrderEmailParams) (*EmailResponse, error)
	mustEmbedUnimplementedEmailSenderServer()
}

// UnimplementedEmailSenderServer must be embedded to have forward compatible implementations.
type UnimplementedEmailSenderServer struct {
}

func (UnimplementedEmailSenderServer) SendEmail(context.Context, *DefaultEmailParams) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedEmailSenderServer) SendOrderEmail(context.Context, *OrderEmailParams) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOrderEmail not implemented")
}
func (UnimplementedEmailSenderServer) mustEmbedUnimplementedEmailSenderServer() {}

// UnsafeEmailSenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailSenderServer will
// result in compilation errors.
type UnsafeEmailSenderServer interface {
	mustEmbedUnimplementedEmailSenderServer()
}

func RegisterEmailSenderServer(s grpc.ServiceRegistrar, srv EmailSenderServer) {
	s.RegisterService(&EmailSender_ServiceDesc, srv)
}

func _EmailSender_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultEmailParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSenderServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emails.EmailSender/SendEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSenderServer).SendEmail(ctx, req.(*DefaultEmailParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailSender_SendOrderEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderEmailParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSenderServer).SendOrderEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emails.EmailSender/SendOrderEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSenderServer).SendOrderEmail(ctx, req.(*OrderEmailParams))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailSender_ServiceDesc is the grpc.ServiceDesc for EmailSender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailSender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emails.EmailSender",
	HandlerType: (*EmailSenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmail",
			Handler:    _EmailSender_SendEmail_Handler,
		},
		{
			MethodName: "SendOrderEmail",
			Handler:    _EmailSender_SendOrderEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emails.proto",
}
