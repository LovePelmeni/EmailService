// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LovePelmeni/OnlineStore/EmailService/mongo_controllers (interfaces: MongoDatabaseInterface)

// Package mock_mongo_controllers is a generated GoMock package.
package mock_mongo_controllers

import (
	reflect "reflect"

	mongo_controllers "github.com/LovePelmeni/OnlineStore/EmailService/mongo_controllers"
	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockMongoDatabaseInterface is a mock of MongoDatabaseInterface interface.
type MockMongoDatabaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDatabaseInterfaceMockRecorder
}

// MockMongoDatabaseInterfaceMockRecorder is the mock recorder for MockMongoDatabaseInterface.
type MockMongoDatabaseInterfaceMockRecorder struct {
	mock *MockMongoDatabaseInterface
}

// NewMockMongoDatabaseInterface creates a new mock instance.
func NewMockMongoDatabaseInterface(ctrl *gomock.Controller) *MockMongoDatabaseInterface {
	mock := &MockMongoDatabaseInterface{ctrl: ctrl}
	mock.recorder = &MockMongoDatabaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoDatabaseInterface) EXPECT() *MockMongoDatabaseInterfaceMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockMongoDatabaseInterface) Connect() (*mongo.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(*mongo.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockMongoDatabaseInterfaceMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockMongoDatabaseInterface)(nil).Connect))
}

// DeleteDocument mocks base method.
func (m *MockMongoDatabaseInterface) DeleteDocument(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDocument", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDocument indicates an expected call of DeleteDocument.
func (mr *MockMongoDatabaseInterfaceMockRecorder) DeleteDocument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocument", reflect.TypeOf((*MockMongoDatabaseInterface)(nil).DeleteDocument), arg0)
}

// GetDocument mocks base method.
func (m *MockMongoDatabaseInterface) GetDocument(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocument", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocument indicates an expected call of GetDocument.
func (mr *MockMongoDatabaseInterfaceMockRecorder) GetDocument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocument", reflect.TypeOf((*MockMongoDatabaseInterface)(nil).GetDocument), arg0)
}

// GetDocumentList mocks base method.
func (m *MockMongoDatabaseInterface) GetDocumentList() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentList")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentList indicates an expected call of GetDocumentList.
func (mr *MockMongoDatabaseInterfaceMockRecorder) GetDocumentList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentList", reflect.TypeOf((*MockMongoDatabaseInterface)(nil).GetDocumentList))
}

// SaveDocument mocks base method.
func (m *MockMongoDatabaseInterface) SaveDocument(arg0 *mongo_controllers.EmailDocument) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDocument", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveDocument indicates an expected call of SaveDocument.
func (mr *MockMongoDatabaseInterfaceMockRecorder) SaveDocument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDocument", reflect.TypeOf((*MockMongoDatabaseInterface)(nil).SaveDocument), arg0)
}

// UpdateDocument mocks base method.
func (m *MockMongoDatabaseInterface) UpdateDocument(arg0 string, arg1 ...map[string]string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDocument", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocument indicates an expected call of UpdateDocument.
func (mr *MockMongoDatabaseInterfaceMockRecorder) UpdateDocument(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocument", reflect.TypeOf((*MockMongoDatabaseInterface)(nil).UpdateDocument), varargs...)
}
